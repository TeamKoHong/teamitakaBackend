openapi: 3.0.0
info:
  title: Teamitaka Backend API
  version: 1.0.0
  description: Teamitaka 백엔드 API 문서
servers:
  - url: http://localhost:3000
    description: 로컬 개발 서버

paths:
  # adminRoutes.js
  /admin/login:
    post:
      summary: 관리자 로그인
      description: 관리자가 로그인하여 JWT 토큰을 발급받습니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 관리자 이메일
                password:
                  type: string
                  description: 관리자 비밀번호
              required:
                - email
                - password
      responses:
        '200':
          description: 로그인 성공, JWT 토큰 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT 토큰
        '401':
          description: 인증 실패
  /admin/certified-users:
    get:
      summary: 인증된 유저 목록 조회
      description: 관리자 권한으로 인증된 유저 목록을 조회합니다.
      responses:
        '200':
          description: 인증된 유저 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /admin/clear-verified-emails:
    delete:
      summary: 인증된 이메일 목록 삭제
      description: 관리자 권한으로 인증된 이메일 목록을 초기화합니다.
      responses:
        '200':
          description: 삭제 성공
      security:
        - bearerAuth: []

  # applicationRoutes.js
  /applications/{recruitment_id}:
    post:
      summary: 모집공고에 지원하기
      description: 사용자가 특정 모집공고에 지원합니다.
      parameters:
        - in: path
          name: recruitment_id
          required: true
          schema:
            type: string
          description: 모집공고 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: 지원자 ID
              required:
                - userId
      responses:
        '201':
          description: 지원 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  applicationId:
                    type: string
                    description: 생성된 지원 ID
      security:
        - bearerAuth: []
    get:
      summary: 특정 모집공고의 지원자 목록 조회
      description: 특정 모집공고에 지원한 사용자 목록을 조회합니다.
      parameters:
        - in: path
          name: recruitment_id
          required: true
          schema:
            type: string
          description: 모집공고 ID
      responses:
        '200':
          description: 지원자 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /applications/{application_id}/approve:
    patch:
      summary: 모집공고 지원 승인
      description: 특정 지원을 승인합니다.
      parameters:
        - in: path
          name: application_id
          required: true
          schema:
            type: string
          description: 지원 ID
      responses:
        '200':
          description: 지원 승인 성공
      security:
        - bearerAuth: []
  /applications/{application_id}/reject:
    patch:
      summary: 모집공고 지원 거절
      description: 특정 지원을 거절합니다.
      parameters:
        - in: path
          name: application_id
          required: true
          schema:
            type: string
          description: 지원 ID
      responses:
        '200':
          description: 지원 거절 성공
      security:
        - bearerAuth: []

  # authRoutes.js
  /auth/register:
    post:
      summary: 회원가입
      description: 새로운 사용자를 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/login:
    post:
      summary: 로그인
      description: 사용자가 로그인하여 JWT 토큰을 발급받습니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /auth/validate-password:
    post:
      summary: 비밀번호 검증
      description: 비밀번호 유효성을 검증합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '200':
          description: 비밀번호 유효

  # devRoutes.js
  /dev/clear-verified-emails:
    delete:
      summary: 인증된 이메일 목록 삭제 (개발용)
      description: 개발 환경에서 인증된 이메일 목록을 삭제합니다.
      responses:
        '200':
          description: 삭제 성공

  # draftRoutes.js
  /recruitment/draft:
    post:
      summary: 모집공고 임시저장
      description: 모집공고를 임시저장합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecruitmentDraft'
      responses:
        '201':
          description: 임시저장 성공
      security:
        - bearerAuth: []

  # likeRoutes.js
  /likes/recruitments:
    get:
      summary: 사용자가 좋아요한 모집공고 목록 조회
      description: 사용자가 좋아요를 누른 모집공고 목록을 반환합니다.
      responses:
        '200':
          description: 좋아요한 모집공고 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recruitment'
      security:
        - bearerAuth: []
  /recruitment/{recruitment_id}/like:
    put:
      summary: 모집공고 좋아요 추가/삭제
      description: 모집공고에 좋아요를 추가하거나 삭제합니다.
      parameters:
        - in: path
          name: recruitment_id
          required: true
          schema:
            type: string
          description: 모집공고 ID
      responses:
        '200':
          description: 좋아요 상태 변경 성공
      security:
        - bearerAuth: []

  # profileRoutes.js
  /profile/{user_id}:
    get:
      summary: 사용자 프로필 조회
      description: 특정 사용자의 프로필 정보를 조회합니다.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        '200':
          description: 사용자 프로필
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /profile/{user_id}/ratings:
    get:
      summary: 사용자 평점 조회
      description: 특정 사용자의 평점 정보를 조회합니다.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        '200':
          description: 사용자 평점
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
  /profile/{user_id}/projects:
    get:
      summary: 사용자 프로젝트 조회
      description: 특정 사용자가 참여한 프로젝트 목록을 조회합니다.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        '200':
          description: 사용자 프로젝트 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'

  # projectRoutes.js
  /projects:
    get:
      summary: 전체 프로젝트 조회
      description: 모든 프로젝트 목록을 조회합니다.
      responses:
        '200':
          description: 프로젝트 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
  /projects/{project_id}:
    get:
      summary: 특정 프로젝트 조회
      description: 특정 프로젝트의 상세 정보를 조회합니다.
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
          description: 프로젝트 ID
      responses:
        '200':
          description: 프로젝트 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      summary: 프로젝트 수정
      description: 특정 프로젝트를 수정합니다.
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
          description: 프로젝트 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: 수정 성공
      security:
        - bearerAuth: []
    delete:
      summary: 프로젝트 삭제
      description: 특정 프로젝트를 삭제합니다.
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
          description: 프로젝트 ID
      responses:
        '200':
          description: 삭제 성공
      security:
        - bearerAuth: []

  # recruitmentRoutes.js
  /recruitment:
    get:
      summary: 모집공고 전체 조회
      description: 모든 모집공고 목록을 조회합니다.
      responses:
        '200':
          description: 모집공고 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recruitment'
    post:
      summary: 모집공고 생성
      description: 새로운 모집공고를 생성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recruitment'
      responses:
        '201':
          description: 생성 성공
      security:
        - bearerAuth: []
  /recruitment/{recruitment_id}:
    get:
      summary: 모집공고 상세 조회
      description: 특정 모집공고의 상세 정보를 조회합니다.
      parameters:
        - in: path
          name: recruitment_id
          required: true
          schema:
            type: string
          description: 모집공고 ID
      responses:
        '200':
          description: 모집공고 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recruitment'
    put:
      summary: 모집공고 수정
      description: 특정 모집공고를 수정합니다 (CLOSED 시 프로젝트 생성).
      parameters:
        - in: path
          name: recruitment_id
          required: true
          schema:
            type: string
          description: 모집공고 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recruitment'
      responses:
        '200':
          description: 수정 성공
      security:
        - bearerAuth: []
    delete:
      summary: 모집공고 삭제
      description: 특정 모집공고를 삭제합니다.
      parameters:
        - in: path
          name: recruitment_id
          required: true
          schema:
            type: string
          description: 모집공고 ID
      responses:
        '200':
          description: 삭제 성공
      security:
        - bearerAuth: []

  # reviewRoutes.js
  /reviews:
    post:
      summary: 리뷰 생성
      description: 새로운 리뷰를 작성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: 리뷰 생성 성공
      security:
        - bearerAuth: []
  /reviews/user/{user_id}:
    get:
      summary: 사용자 리뷰 조회
      description: 특정 사용자에 대한 리뷰를 조회합니다.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        '200':
          description: 리뷰 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
      security:
        - bearerAuth: []
  /reviews/project/{project_id}:
    get:
      summary: 프로젝트 리뷰 조회
      description: 특정 프로젝트에 대한 리뷰를 조회합니다.
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
          description: 프로젝트 ID
      responses:
        '200':
          description: 리뷰 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
      security:
        - bearerAuth: []
  /reviews/{review_id}:
    delete:
      summary: 리뷰 삭제
      description: 특정 리뷰를 삭제합니다.
      parameters:
        - in: path
          name: review_id
          required: true
          schema:
            type: string
          description: 리뷰 ID
      responses:
        '200':
          description: 삭제 성공
      security:
        - bearerAuth: []

  # scrapRoutes.js
  /scraps/recruitments:
    get:
      summary: 사용자가 스크랩한 모집공고 목록 조회
      description: 사용자가 스크랩한 모집공고 목록을 반환합니다.
      responses:
        '200':
          description: 스크랩한 모집공고 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recruitment'
      security:
        - bearerAuth: []
  /recruitment/{recruitment_id}/scrap:
    put:
      summary: 모집공고 스크랩 추가/삭제
      description: 모집공고를 스크랩하거나 스크랩을 취소합니다.
      parameters:
        - in: path
          name: recruitment_id
          required: true
          schema:
            type: string
          description: 모집공고 ID
      responses:
        '200':
          description: 스크랩 상태 변경 성공
      security:
        - bearerAuth: []

  # searchRoutes.js
  /search:
    get:
      summary: 검색
      description: 모집공고, 프로젝트 등을 검색합니다.
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: 검색 키워드
      responses:
        '200':
          description: 검색 결과
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recruitment'

  # univCertRoutes.js
  /univ/send-otp:
    post:
      summary: OTP 전송
      description: 대학 인증을 위한 OTP를 전송합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 대학 이메일
              required:
                - email
      responses:
        '200':
          description: OTP 전송 성공
  /univ/verify-otp:
    post:
      summary: OTP 검증
      description: 전송된 OTP를 검증합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                otp:
                  type: string
              required:
                - email
                - otp
      responses:
        '200':
          description: OTP 검증 성공

  # userRoutes.js
  /users:
    get:
      summary: 전체 사용자 조회
      description: 모든 사용자 목록을 조회합니다.
      responses:
        '200':
          description: 사용자 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: 사용자 생성
      description: 새로운 사용자를 생성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: 사용자 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 ID
        email:
          type: string
          description: 사용자 이메일
        name:
          type: string
          description: 사용자 이름
    UserRegister:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
      required:
        - email
        - password
        - name
    Recruitment:
      type: object
      properties:
        recruitmentId:
          type: string
          description: 모집공고 ID
        title:
          type: string
          description: 제목
        content:
          type: string
          description: 내용
        likeCnt:
          type: integer
          description: 좋아요 수
    RecruitmentDraft:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    Project:
      type: object
      properties:
        projectId:
          type: string
          description: 프로젝트 ID
        title:
          type: string
          description: 제목
        description:
          type: string
          description: 설명
    Review:
      type: object
      properties:
        reviewId:
          type: string
          description: 리뷰 ID
        userId:
          type: string
          description: 작성자 ID
        projectId:
          type: string
          description: 프로젝트 ID
        content:
          type: string
          description: 리뷰 내용
    Rating:
      type: object
      properties:
        ratingId:
          type: string
          description: 평점 ID
        userId:
          type: string
          description: 사용자 ID
        score:
          type: integer
          description: 평점