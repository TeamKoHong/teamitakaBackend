name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Determine Environment
        id: env-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=development" >> $GITHUB_ENV
          else
            echo "ENV=production" >> $GITHUB_ENV
          fi
          echo "Determined ENV: ${{ env.ENV }}"

      - name: Generate .env file (for development)
        if: env.ENV == 'development'
        run: |
          echo "NODE_ENV=development" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_CHARSET=utf8mb4" >> .env

      - name: Debug - Print Environment
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
          echo "DB_HOST=${{ secrets.DB_HOST }}"

      - name: Test Cloud SQL Connection
        run: |
          echo "Testing connection to Cloud SQL at 35.223.147.232:3306..."
          nc -zv 35.223.147.232 3306 || {
            echo "‚ö†Ô∏è Failed to connect to Cloud SQL at 35.223.147.232:3306"
            echo "Check GCP Firewall, instance status, and Secrets settings."
            exit 1
          }
          echo "‚úÖ Connection to Cloud SQL successful"

      - name: Check if Users table exists
        run: node src/scripts/checkDB.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run Sequelize migrations (Users first)
        run: |
          npx sequelize-cli db:migrate --name 20250219140000-create-users.js
          npx sequelize-cli db:migrate --name 20250219140810-create-applications.js

      - name: Insert data from CSV
        if: env.NODE_ENV != 'test'
        run: |
          if [[ "${{ env.ENV }}" == "production" ]]; then
            export DB_HOST=${{ secrets.DB_HOST }}
          else
            export DB_HOST=mysql
          fi
          echo "üîç Inserting data into DB from CSV..."
          node src/scripts/insertCSV.js
          echo "‚úÖ CSV Insert Completed"

      - name: Deploy Application
        run: |
          echo "üöÄ Starting Application..."
          npm run start

env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  PORT: ${{ secrets.PORT }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DB_CHARSET: "utf8mb4"
  DB_DIALECT: "mysql"