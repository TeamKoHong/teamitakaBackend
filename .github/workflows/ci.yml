name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # OIDC ÌÜ†ÌÅ∞ Ï†ÑÎã¨ÏùÑ ÏúÑÌï¥ ÌïÑÏöî
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Determine Environment
        id: env-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=development" >> $GITHUB_ENV
          else
            echo "ENV=production" >> $GITHUB_ENV
          fi

      - name: Generate .env file (for development)
        if: ${{ env.ENV == 'development' }}
        run: |
          echo "NODE_ENV=development" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_CHARSET=utf8mb4" >> .env
          echo "‚úÖ .env file for development has been created."

      - name: Write service account key to file
        if: ${{ env.ENV == 'production' }}
        run: |
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" > service-account-key.json

      - name: Authenticate to Google Cloud (Workload Identity Federation)
        if: ${{ env.ENV == 'production' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure gcloud SDK
        if: ${{ env.ENV == 'production' }}
        run: |
          gcloud config set project "${{ secrets.GCP_PROJECT_ID }}"
          gcloud config set compute/region "${{ secrets.GCP_REGION }}"

      - name: Download Cloud SQL Auth Proxy (Production)
        if: ${{ env.ENV == 'production' }}
        run: |
          echo "üîΩ Downloading Cloud SQL Auth Proxy..."
          curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
          chmod +x cloud_sql_proxy

      - name: Start Cloud SQL Auth Proxy (Production)
        if: ${{ env.ENV == 'production' }}
        run: |
          echo "üîí Starting Cloud SQL Auth Proxy with IAM authentication..."
          ./cloud_sql_proxy --auto-iam-authn "${{ secrets.GCP_CLOUDSQL_INSTANCE }}" --credentials-file="service-account-key.json" --port 3306 &
          echo "Waiting for Cloud SQL Auth Proxy to fully start..."
          sleep 30
          lsof -i :3306 || echo "Port 3306 not listening yet"

      - name: Run Sequelize migrations
        run: |
          if [[ "${{ env.ENV }}" == "development" ]]; then
            npx sequelize-cli db:migrate --env=development
          else
            npx sequelize-cli db:migrate --env=production
          fi

      - name: Insert data from CSV
        run: node src/scripts/insertCSV.js

      - name: Deploy Application
        run: npm run start

env:
  # ‚úÖ Î°úÏª¨ Í∞úÎ∞ú ÌôòÍ≤Ω Î≥ÄÏàò
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  PORT: ${{ secrets.PORT }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DB_CHARSET: "utf8mb4"
  DB_DIALECT: "mysql"

  # ‚úÖ Production ÌôòÍ≤Ω (Cloud SQL)
  GCP_DB_USER: ${{ secrets.GCP_DB_USER }}
  GCP_DB_NAME: ${{ secrets.GCP_DB_NAME }}
  GCP_DB_PASSWORD: ""  # IAM Ïù∏Ï¶ù ÏÇ¨Ïö©ÏûêÏóêÏÑúÎäî ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå
  GCP_CLOUDSQL_INSTANCE: ${{ secrets.GCP_CLOUDSQL_INSTANCE }}  # Ïòà: teamitaka:us-central1:teamitaka
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
