name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Determine Environment
        id: env-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=development" >> $GITHUB_ENV
          else
            echo "ENV=production" >> $GITHUB_ENV
          fi

      - name: Generate .env file (for development)
        if: ${{ env.ENV == 'development' }}
        run: |
          echo "NODE_ENV=development" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_CHARSET=utf8mb4" >> .env

      - name: Authenticate to Google Cloud (Workload Identity Federation)
        if: ${{ env.ENV == 'production' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set GCP project
        if: ${{ env.ENV == 'production' }}
        run: gcloud config set project "${{ secrets.GCP_PROJECT_ID }}"

      - name: Configure gcloud SDK
        if: ${{ env.ENV == 'production' }}
        run: gcloud config set compute/region "${{ secrets.GCP_REGION }}"

      - name: Download and Start Cloud SQL Proxy (Production)
        if: ${{ env.ENV == 'production' }}
        run: |
          echo "üîΩ Downloading Cloud SQL Proxy..."
          curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 || (echo "‚ö†Ô∏è Download failed" && exit 1)
          chmod +x cloud_sql_proxy
          echo "üîí Starting Cloud SQL Proxy with no TLS..."
          echo "Instance: ${{ secrets.GCP_CLOUDSQL_INSTANCE }}"
          if [ -z "${{ secrets.GCP_CLOUDSQL_INSTANCE }}" ]; then
            echo "‚ö†Ô∏è GCP_CLOUDSQL_INSTANCE is empty!"
            exit 1
          fi
          ./cloud_sql_proxy -instances=${{ secrets.GCP_CLOUDSQL_INSTANCE }}=tcp:3306 -disable_tls -verbose > proxy_log.txt 2>&1 &
          PROXY_PID=$!
          echo "Proxy PID: $PROXY_PID"
          echo "Waiting for Proxy to stabilize..."
          sleep 90
          if lsof -i :3306; then
            echo "‚úÖ Proxy is running on 3306"
          else
            echo "‚ö†Ô∏è Proxy failed to start on 3306"
            cat proxy_log.txt
            kill -9 $PROXY_PID 2>/dev/null || true
            exit 1
          fi

      - name: Verify Proxy Connection
        if: ${{ env.ENV == 'production' }}
        run: |
          echo "üîç Checking Proxy connection..."
          nc -zv 127.0.0.1 3306 || (echo "‚ö†Ô∏è Proxy is not responding!" && cat proxy_log.txt && exit 1)

      - name: Debug - Print DATABASE_URL
        run: echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"

      - name: Check if Users table exists
        run: node src/scripts/checkDB.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run Sequelize migrations (Users first)
        run: |
          npx sequelize-cli db:migrate --name 20250219140000-create-users.js
          npx sequelize-cli db:migrate --name 20250219140810-create-applications.js

      - name: Insert data from CSV
        if: env.NODE_ENV != 'test'
        run: |
          if [[ "${{ env.ENV }}" == "production" ]]; then
            export DB_HOST=127.0.0.1
          else
            export DB_HOST=mysql
          fi
          echo "üîç Inserting data into DB from CSV..."
          node src/scripts/insertCSV.js
          echo "‚úÖ CSV Insert Completed"

      - name: Validate Cloud SQL Proxy is Running
        if: ${{ env.ENV == 'production' }}
        run: |
          echo "üîç Validating Cloud SQL Proxy..."
          if lsof -i :3306; then
            echo "‚úÖ Cloud SQL Proxy is running"
          else
            echo "‚ùå Cloud SQL Proxy is NOT running! Exiting..."
            exit 1
          fi

      - name: Deploy Application
        run: |
          echo "üöÄ Starting Application..."
          npm run start

env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  PORT: ${{ secrets.PORT }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DB_CHARSET: "utf8mb4"
  DB_DIALECT: "mysql"
  GCP_DB_USER: ${{ secrets.GCP_DB_USER }}
  GCP_DB_NAME: ${{ secrets.GCP_DB_NAME }}
  GCP_DB_PASSWORD: ${{ secrets.GCP_DB_PASSWORD }}
  GCP_CLOUDSQL_INSTANCE: ${{ secrets.GCP_CLOUDSQL_INSTANCE }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  USE_CLOUD_SQL_PROXY: "true"