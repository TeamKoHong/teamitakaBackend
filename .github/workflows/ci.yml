name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # ‚úÖ OIDC ÌÜ†ÌÅ∞ÏùÑ Ïò¨Î∞îÎ•¥Í≤å Ï†ÑÎã¨ÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏöî
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Authenticate to Google Cloud (Workload Identity Federation)
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Debug GCP Authentication
        run: |
          echo "üîç Checking Workload Identity Federation..."
          echo "GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}"
          echo "GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}"

      - name: Configure gcloud SDK
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set compute/region ${{ secrets.GCP_REGION }}

      - name: Debug Environment Variables
        run: |
          echo "üîç Checking environment variables..."
          echo "NODE_ENV: $NODE_ENV"
          echo "DB_USER: $DB_USER"
          echo "DB_HOST: $DB_HOST"
          echo "GCP_DB_USER: $GCP_DB_USER"
          echo "GCP_DB_HOST: $GCP_DB_HOST"
          echo "GCP_CLOUDSQL_INSTANCE: ${{ secrets.GCP_CLOUDSQL_INSTANCE }}"

      - name: Securely Connect to Cloud SQL
        run: |
          set -o errexit -o nounset -o pipefail
          echo "üîí Connecting to Cloud SQL using IAM authentication..."
          if ! gcloud sql connect "${{ secrets.GCP_CLOUDSQL_INSTANCE }}" --user=root --quiet; then
            echo "‚ùå ERROR: Cloud SQL Connection Failed. Verify IAM permissions and network settings."
            exit 1
          fi

      - name: Run Sequelize migrations
        run: npx sequelize-cli db:migrate --env=production

      - name: Insert data from CSV
        run: node src/scripts/insertCSV.js

      - name: Deploy Application
        run: npm run start

env:
  NODE_ENV: production

  # ‚úÖ Î°úÏª¨ Í∞úÎ∞ú ÌôòÍ≤Ω Î≥ÄÏàò
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_DIALECT: "mysql"

  # ‚úÖ CI/CD Î∞∞Ìè¨ ÌôòÍ≤Ω Î≥ÄÏàò (Cloud SQL)
  GCP_DB_USER: ${{ secrets.GCP_DB_USER }}
  GCP_DB_PASSWORD: ${{ secrets.GCP_DB_PASSWORD }}
  GCP_DB_NAME: ${{ secrets.GCP_DB_NAME }}
  GCP_DB_HOST: ${{ secrets.GCP_DB_HOST }}
  GCP_DB_PORT: "3306"

