name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Docker
        uses: docker/setup-buildx-action@v3

      # ---------------------------------------------------------
      # 1) Docker Build (Production Image)
      # ---------------------------------------------------------
      - name: Build Docker Image
        run: |
          docker build -t teamitaka-app -f Dockerfile.prod .
        working-directory: .
      
      - name: Set Production Environment
        run: |
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "Determined NODE_ENV: ${{ env.NODE_ENV }}"

      # ---------------------------------------------------------
      # 2) Debug - Print Environment
      #    여기서 Secrets로 넘어온 DB 비밀번호의 특수문자 인코딩 여부 확인 가능
      # ---------------------------------------------------------
      - name: Debug - Print Environment
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
          echo "GCP_DB_HOST=${{ secrets.GCP_DB_HOST }}"
          echo "GCP_DB_USER=${{ secrets.GCP_DB_USER }}"
          echo "GCP_DB_PASSWORD=${{ secrets.GCP_DB_PASSWORD }}"
          echo "GCP_DB_NAME=${{ secrets.GCP_DB_NAME }}"
          echo "GCP_DB_PORT=${{ secrets.GCP_DB_PORT }}"
          # 필요시 URL 인코딩/디코딩 테스트
          echo "URL_PARSED=$(echo -n "${{ secrets.DATABASE_URL }}" | python3 -c 'import urllib.parse; print(urllib.parse.unquote(input()))')"

      # ---------------------------------------------------------
      # 3) Test Cloud SQL Connection
      #    Dockerfile.prod에서 netcat 설치가 되었는지 확인 필요
      # ---------------------------------------------------------
      - name: Test Cloud SQL Connection
        run: |
          echo "Testing connection to Cloud SQL at ${{ secrets.GCP_DB_HOST }}:${{ secrets.GCP_DB_PORT }}"
          docker run --rm teamitaka-app nc -zv ${{ secrets.GCP_DB_HOST }} ${{ secrets.GCP_DB_PORT }} || {
            echo "⚠️ Failed to connect to Cloud SQL"
            exit 1
          }
          echo "✅ Connection to Cloud SQL successful"

      # ---------------------------------------------------------
      # 4) Run Sequelize migrations in Docker
      #    DATABASE_URL or (host, user, password, etc.)로 접속 가능
      # ---------------------------------------------------------
      - name: Run Sequelize migrations in Docker
        run: |
          echo "Running migration with DATABASE_URL: ${{ secrets.DATABASE_URL }}"
          docker run teamitaka-app npx sequelize-cli db:migrate --url "${{ secrets.DATABASE_URL }}"
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # ---------------------------------------------------------
      # 5) DB 확인, CSV Insert 등
      # ---------------------------------------------------------
      - name: Check if Users table exists
        run: |
          docker run teamitaka-app node src/scripts/checkDB.js
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Insert data from CSV
        run: |
          echo "🔍 Inserting data into DB from CSV..."
          docker run teamitaka-app node src/scripts/insertCSV.js
          echo "✅ CSV Insert Completed"
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # ---------------------------------------------------------
      # 6) Deploy Application
      # ---------------------------------------------------------
      - name: Deploy Application
        run: |
          echo "🚀 Starting Application..."
          docker run -d -p 3000:3000 --name teamitaka-prod teamitaka-app npm run start
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

env:
  # 깔끔하게 정리해뒀으나, 실제로는 Secrets 사용 권장
  GCP_DB_HOST: ${{ secrets.DB_HOST }}
  GCP_DB_NAME: ${{ secrets.DB_NAME }}
  GCP_DB_USER: ${{ secrets.DB_USER }}
  GCP_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  GCP_DB_PORT: ${{ secrets.DB_PORT }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DB_CHARSET: "utf8mb4"
  DB_DIALECT: "mysql"
