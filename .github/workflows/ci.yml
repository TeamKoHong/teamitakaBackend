name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build-and-deploy-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Prepare Service Account Key
        run: |
          cat <<EOF > sa-key.json
          ${{ secrets.GCP_SA_KEY }}
          EOF
          echo "Service Account JSON saved to sa-key.json"

      - name: Download Cloud SQL Proxy
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy

      - name: Start Cloud SQL Proxy
        run: |
          ./cloud_sql_proxy \
            -instances="${{ secrets.INSTANCE_CONNECTION_NAME }}=tcp:127.0.0.1:3307" \
            -credential_file=sa-key.json \
            > proxy.log 2>&1 &
          sleep 5
          if ! nc -z 127.0.0.1 3307; then
            echo "⚠️ Proxy failed to start!"
            cat proxy.log
            exit 1
          fi
          echo "✅ Proxy running on 3307"
          cat proxy.log

      - name: Test Cloud SQL Connection (host)
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd
          echo "Testing connection to local Proxy at 127.0.0.1:3307..."
          for i in {1..10}; do
            nc -zv 127.0.0.1 3307 && break
            echo "Attempt $i failed, retrying in 2 seconds..."
            sleep 2
          done || {
            echo "⚠️ Failed to connect to local Proxy after 10 attempts"
            cat proxy.log
            exit 1
          }
          echo "✅ Cloud SQL Proxy is accessible on 127.0.0.1:3307"

      - name: Install Docker (Buildx)
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t teamitaka-app -f Dockerfile.prod .
        working-directory: .

      - name: Set Database Environment
        run: |
          DB_NAME_VALUE=${{ secrets.DB_NAME }}
          if [ -z "$DB_NAME_VALUE" ]; then
            echo "Warning: DB_NAME not found in secrets, using default 'teamitaka_db'"
            DB_NAME_VALUE="teamitaka_db"
          fi
          echo "DATABASE_URL=mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:3307/${DB_NAME_VALUE}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_NAME=${DB_NAME_VALUE}" >> $GITHUB_ENV
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_PORT=3307" >> $GITHUB_ENV
          echo "DB_DIALECT=mysql" >> $GITHUB_ENV
          echo "DB_CHARSET=utf8mb4" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "Determined DATABASE_URL: ${{ env.DATABASE_URL }}"

      - name: Debug - Print Environment
        run: |
          echo "INSTANCE_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }}"
          echo "DB_HOST=${{ env.DB_HOST }}"
          echo "DB_PORT=${{ env.DB_PORT }}"
          echo "DB_USER=${{ env.DB_USER }}"
          echo "DB_PASSWORD=${{ env.DB_PASSWORD }}"
          echo "DB_NAME=${{ env.DB_NAME }}"
          echo "DATABASE_URL=${{ env.DATABASE_URL }}"
          echo "NODE_ENV=${{ env.NODE_ENV }}"

      - name: Test Cloud SQL Connection (docker)
        run: |
          echo "Testing connection from container to Proxy at 127.0.0.1:3307..."
          docker run --rm --network host \
            teamitaka-app nc -zv 127.0.0.1 3307 || {
              echo "⚠️ Failed to connect from container"
              exit 1
            }
          echo "✅ Container -> Cloud SQL Proxy connection successful"

      - name: Reset Database (Drop and Recreate Schema)
        run: |
          echo "Resetting database by dropping and recreating schema..."
          docker run --network host \
            -e DB_USER=${{ env.DB_USER }} \
            -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
            -e DB_NAME=${{ env.DB_NAME }} \
            -e DB_HOST=${{ env.DB_HOST }} \
            -e DB_PORT=${{ env.DB_PORT }} \
            teamitaka-app \
            bash -c "mysql -h ${{ env.DB_HOST }} -P ${{ env.DB_PORT }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} -e 'DROP SCHEMA IF EXISTS \`${{ env.DB_NAME }}\`;' && mysql -h ${{ env.DB_HOST }} -P ${{ env.DB_PORT }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} -e 'CREATE SCHEMA \`${{ env.DB_NAME }}\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;' && echo 'Database schema reset completed'"

      - name: Run Sequelize migrations in Docker
        run: |
          echo "Running migration via container with Auth Proxy for deployment..."
          docker run --network host \
            -e DATABASE_URL=${{ env.DATABASE_URL }} \
            -e NODE_ENV=production \
            teamitaka-app \
            bash -c "npx sequelize-cli db:migrate --url ${{ env.DATABASE_URL }} --debug"

      - name: Check Migration Status
        run: |
          echo "Checking migration status for deployment..."
          docker run --network host \
            -e DATABASE_URL=${{ env.DATABASE_URL }} \
            -e NODE_ENV=production \
            teamitaka-app \
            bash -c "npx sequelize-cli db:migrate:status --url ${{ env.DATABASE_URL }}"

      - name: Insert Mockup Data
        run: |
          echo "🔍 Starting mockup data insertion process..."
          docker run --network host \
            -v ${GITHUB_WORKSPACE}/src/data:/app/data \
            -e DATABASE_URL=${{ env.DATABASE_URL }} \
            -e NODE_ENV=production \
            teamitaka-app \
            node src/scripts/loadMockupData.js --users --recruitments --projects --verbose
          echo "✅ Mockup data insertion completed"

      - name: Insert Universities, Colleges, Departments Data
        run: |
          echo "🔍 Inserting Universities, Colleges, Departments data into DB from CSV for deployment..."
          docker run --network host \
            -v ${GITHUB_WORKSPACE}/seeders:/app/seeders \
            -e DATABASE_URL=${{ env.DATABASE_URL }} \
            -e NODE_ENV=production \
            teamitaka-app \
            node src/scripts/insertCSV.js
          echo "✅ Universities, Colleges, Departments CSV Insert Completed"

      - name: Deploy and Test Application
        run: |
          echo "🚀 Starting Application for deployment testing..."
          docker run -d --network host \
            --name teamitaka-prod \
            -e DATABASE_URL="${{ env.DATABASE_URL }}" \
            -e NODE_ENV=production \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            teamitaka-app \
            npm run start
          echo "✅ App container started (port 3000 exposed on host)"
          
          # DB 준비 대기
          echo "⏳ Waiting for DB to be ready..."
          for i in {1..60}; do
            if mysqladmin ping -h 127.0.0.1 -P 3307 --silent -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }}; then
              echo "✅ DB is ready"
              break
            fi
            echo "DB not ready, retrying in 10 seconds..."
            sleep 10
          done || {
            echo "⚠️ DB not ready after 60 attempts (10 minutes)"
            docker logs teamitaka-prod 2>&1 || echo "No logs available"
            exit 1
          }
          
          # 서버 준비 대기
          echo "⏳ Waiting for server to initialize..."
          sleep 10  # 모델 로딩 및 서버 준비 대기
          
          # 헬스체크 및 로그 출력
          echo "🔍 Testing application health..."
          for i in {1..5}; do
            HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://127.0.0.1:3000/health)
            STATUS_CODE=${HEALTH_RESPONSE: -3}  # 마지막 3자리 (HTTP 상태 코드)
            RESPONSE_BODY=${HEALTH_RESPONSE:0:${#HEALTH_RESPONSE}-3}  # 응답 본문
            echo "Health check response: $RESPONSE_BODY (Status: $STATUS_CODE)"
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "✅ Application health check passed for deployment"
              break
            else
              echo "⚠️ Health check failed, retrying in 5 seconds..."
              docker logs teamitaka-prod 2>&1 || echo "No logs available"
              sleep 5
            fi
            if [ $i -eq 5 ]; then
              echo "⚠️ Application health check failed after 5 attempts"
              docker logs teamitaka-prod 2>&1
              exit 1
            fi
          done

      - name: Stop Cloud SQL Proxy
        run: pkill cloud_sql_proxy || true