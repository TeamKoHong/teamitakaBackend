name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # ---------------------------------------------------------
      # 0) Check out the repository code
      # ---------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # ---------------------------------------------------------
      # 0-1) Node ÏÑ§Ïπò
      # ---------------------------------------------------------
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # ---------------------------------------------------------
      # 1) Prepare Service Account Key (Î©ÄÌã∞ÎùºÏù∏ ÏïàÏ†Ñ Ï†ÄÏû•)
      #    - cat <<EOF ... EOF ÏÇ¨Ïö©
      # ---------------------------------------------------------
      - name: Prepare Service Account Key
        run: |
          # Ï£ºÏùò: ÏïÑÎûò Íµ¨Î¨∏ÏùÄ secrets.GCP_SA_KEYÏóê
          # { ... } Ï†ÑÏ≤¥ JSONÏù¥ Îì§Ïñ¥ÏûàÏñ¥Ïïº Ìï©ÎãàÎã§.
          cat <<EOF > sa-key.json
${{ secrets.GCP_SA_KEY }}
EOF
          echo "Service Account JSON saved to sa-key.json"

      # ---------------------------------------------------------
      # 2) Download Cloud SQL Proxy
      # ---------------------------------------------------------
      - name: Download Cloud SQL Proxy
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy

      # ---------------------------------------------------------
      # 3) Start Cloud SQL Proxy (background)
      # ---------------------------------------------------------
      - name: Start Cloud SQL Proxy
        run: |
          ./cloud_sql_proxy \
            -instances="${{ secrets.INSTANCE_CONNECTION_NAME }}=tcp:3306" \
            -credential_file=sa-key.json \
            > proxy.log 2>&1 &
          echo "Cloud SQL Proxy started in the background."

      # ---------------------------------------------------------
      # 4) [Optional] Test DB connection from host (netcat)
      # ---------------------------------------------------------
      - name: Test Cloud SQL Connection (host)
        run: |
          sudo apt-get update
          # Install netcat
          sudo apt-get install -y netcat-openbsd
          echo "Testing connection to local Proxy at 127.0.0.1:3306..."
          nc -zv 127.0.0.1 3306 || {
            echo "‚ö†Ô∏è Failed to connect to local Proxy"
            echo "Check proxy.log for details:"
            cat proxy.log
            exit 1
          }
          echo "‚úÖ Cloud SQL Proxy is accessible on 127.0.0.1:3306"

      # ---------------------------------------------------------
      # 5) Docker Build (Production Image)
      # ---------------------------------------------------------
      - name: Install Docker (Buildx)
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t teamitaka-app -f Dockerfile.prod .
        working-directory: .
      
      - name: Set Production Environment
        run: |
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "Determined NODE_ENV: ${{ env.NODE_ENV }}"

      # ---------------------------------------------------------
      # 6) Debug - Print Environment (Secrets)
      # ---------------------------------------------------------
      - name: Debug - Print Environment
        run: |
          echo "INSTANCE_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }}"
          echo "DB_HOST=host.docker.internal"
          echo "DB_PORT=3306"
          echo "DB_USER=${{ secrets.DB_USER }}"
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
          echo "DB_NAME=${{ secrets.DB_NAME }}"
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
          # (ÎßåÏïΩ secrets.DATABASE_URLÍ∞Ä Ïã§Ï†ú DSN ÌòïÏãùÏù¥ÎùºÎ©¥ Ïù∏ÏΩîÎî© Ïó¨Î∂Ä ÌôïÏù∏
          echo "URL_PARSED=$(echo -n "${{ secrets.DATABASE_URL }}" | python3 -c 'import urllib.parse; print(urllib.parse.unquote(input()))')"

      # ---------------------------------------------------------
      # 7) Test Cloud SQL Connection in Docker
      # ---------------------------------------------------------
      - name: Test Cloud SQL Connection (docker)
        run: |
          echo "Testing connection from container to Proxy at host.docker.internal:3306..."
          docker run --rm \
            --add-host=host.docker.internal:host-gateway \
            teamitaka-app nc -zv host.docker.internal 3306 || {
              echo "‚ö†Ô∏è Failed to connect from container"
              exit 1
            }
          echo "‚úÖ Container -> Cloud SQL Proxy connection successful"

      # ---------------------------------------------------------
      # 8) Run Sequelize migrations in Docker
      # ---------------------------------------------------------
      - name: Run Sequelize migrations in Docker
        run: |
          echo "Running migration via container with Auth Proxy..."
          docker run \
            --add-host=host.docker.internal:host-gateway \
            -e NODE_ENV=production \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            teamitaka-app \
            npx sequelize-cli db:migrate --url "mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@host.docker.internal:3306/${{ secrets.DB_NAME }}"
        env:
          NODE_ENV: production

      # ---------------------------------------------------------
      # 9) DB ÌôïÏù∏, CSV Insert Îì±
      # ---------------------------------------------------------
      - name: Check if Users table exists
        run: |
          docker run \
            --add-host=host.docker.internal:host-gateway \
            -e NODE_ENV=production \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            teamitaka-app \
            node src/scripts/checkDB.js

      - name: Insert data from CSV
        run: |
          echo "üîç Inserting data into DB from CSV..."
          docker run \
            --add-host=host.docker.internal:host-gateway \
            -e NODE_ENV=production \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            teamitaka-app \
            node src/scripts/insertCSV.js
          echo "‚úÖ CSV Insert Completed"

      # ---------------------------------------------------------
      # 10) Deploy Application (example)
      # ---------------------------------------------------------
      - name: Deploy Application
        run: |
          echo "üöÄ Starting Application (production)..."
          docker run -d \
            --add-host=host.docker.internal:host-gateway \
            -p 3000:3000 \
            --name teamitaka-prod \
            -e NODE_ENV=production \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            teamitaka-app \
            npm run start
          echo "‚úÖ App container started on port 3000"

env:
  DB_CHARSET: "utf8mb4"
  DB_DIALECT: "mysql"
