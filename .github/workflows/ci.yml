name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Determine Environment
        id: env-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=development" >> $GITHUB_ENV
          else
            echo "ENV=production" >> $GITHUB_ENV
          fi

      - name: Generate .env file (Development)
        if: ${{ env.ENV == 'development' }}
        run: |
          echo "NODE_ENV=development" >> .env
          echo "DB_HOST=127.0.0.1" >> .env  # 명시적 IPv4 설정
          echo "DB_PORT=3306" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

      - name: Authenticate to Google Cloud (Production)
        if: ${{ env.ENV == 'production' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Download and Start Cloud SQL Proxy (Production)
        if: ${{ env.ENV == 'production' }}
        run: |
          curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
          chmod +x cloud_sql_proxy
          echo "🔒 Starting Cloud SQL Proxy..."
          ./cloud_sql_proxy -instances=${{ secrets.GCP_CLOUDSQL_INSTANCE }}=tcp:3306 -verbose &
          sleep 60  # 대기 시간 확보            lsof -i :3306 || (echo "⚠️ Port 3306 not ready" && exit 1)  # 포트 확인 강화

      - name: Run Sequelize migrations
        run: npx sequelize-cli db:migrate --env=${{ env.ENV }}