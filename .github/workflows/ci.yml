name: CI Pipeline

on:
  push:
    branches:
      - dev
      - "feature/*"
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # ✅ OIDC 토큰을 올바르게 전달하기 위해 필요
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Determine Environment
        id: env-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=development" >> $GITHUB_ENV
            echo "::set-output name=ENV::development"
          else
            echo "ENV=production" >> $GITHUB_ENV
            echo "::set-output name=ENV::production"
          fi

      # ✅ 로컬 개발 환경일 경우 .env 파일 생성
      - name: Generate .env file (for development)
        if: ${{ steps.env-check.outputs.ENV == 'development' }}
        run: |
          echo "NODE_ENV=development" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_CHARSET=utf8mb4" >> .env
          echo "✅ .env file for development has been created."

      # ✅ 배포 환경에서 GCP Workload Identity Federation을 활용하여 인증
      - name: Authenticate to Google Cloud (Workload Identity Federation)
        if: ${{ steps.env-check.outputs.ENV == 'production' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure gcloud SDK
        if: ${{ steps.env-check.outputs.ENV == 'production' }}
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set compute/region ${{ secrets.GCP_REGION }}

      # ✅ 배포 환경에서 Cloud SQL에 안전하게 연결
      - name: Securely Connect to Cloud SQL (Production)
        if: ${{ steps.env-check.outputs.ENV == 'production' }}
        run: |
          set -o errexit -o nounset -o pipefail
          echo "🔒 Connecting to Cloud SQL using IAM authentication..."
          if ! gcloud sql connect "${{ secrets.GCP_CLOUDSQL_INSTANCE }}" --user=root --quiet; then
            echo "❌ ERROR: Cloud SQL Connection Failed. Verify IAM permissions and network settings."
            exit 1
          fi

      - name: Run Sequelize migrations
        run: |
          if [[ "${{ steps.env-check.outputs.ENV }}" == "development" ]]; then
            npx sequelize-cli db:migrate --env=development
          else
            npx sequelize-cli db:migrate --env=production
          fi

      - name: Insert data from CSV
        run: node src/scripts/insertCSV.js

      - name: Deploy Application
        run: npm run start
