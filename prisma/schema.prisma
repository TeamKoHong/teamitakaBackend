generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())  
  username        String   @unique
  email           String   @unique
  password        String
  profileImageUrl String?
  userType        UserType @default(MEMBER)
  role            UserRole @default(MEMBER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  // Relations
  projects        Project[]
  reviewsGiven    Review[]       @relation(name: "ReviewerRelation")
  reviewsReceived Review[]       @relation(name: "RevieweeRelation")
  notifications   Notification[]
  searches        Search[]
}

model Project {
  id              String        @id @default(uuid())
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime
  projectImageUrl String?
  status          ProjectStatus @default(PLANNED)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())

  // Relations
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String
  reviews      Review[]
  recruitments Recruitment[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  feedback  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  reviewer   User    @relation(name: "ReviewerRelation", fields: [reviewerId], references: [id])
  reviewerId String
  reviewee   User    @relation(name: "RevieweeRelation", fields: [revieweeId], references: [id])
  revieweeId String
  project    Project @relation(fields: [projectId], references: [id])
  projectId  String
}

model Recruitment {
  id          String            @id @default(uuid())
  title       String
  description String
  status      RecruitmentStatus @default(OPEN)
  createdAt   DateTime          @default(now())

  // Relations
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Search {
  id         Int      @id @default(autoincrement())
  keyword    String
  searchTime DateTime @default(now())

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Keyword {
  id        Int      @id @default(autoincrement())
  keyword   String   @unique
  count     Int      @default(0)
  updatedAt DateTime @default(now())
}

// ENUMs
enum UserType {
  ADMIN
  MEMBER
}

enum UserRole {
  ADMIN
  MEMBER
}

enum ProjectStatus {
  PLANNED
  RECRUITING
  CLOSED
}

enum RecruitmentStatus {
  OPEN
  CLOSED
}
